/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AssigningAuthorityRole;

import Business.Assignment.Assignment;
import Business.Enterprise.Enterprise;
import Business.Enterprise.UNOSEnterprise;
import Business.Network.Network;
import Business.Organ.Organ;
import Business.Organization.AAOrganization;
import Business.UserAccount.DonorAccount;
import Business.UserAccount.PatientAccount;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CampUNOSWorkRequest;
import Business.WorkQueue.HosUNOSWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JPanel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class AssigningAuthorityWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form AssigningAuthorityWorkArea
     */
    private JPanel userProcessContainer;
    private AAOrganization organization;
    private UNOSEnterprise enterprise;
    private UserAccount userAccount;
    private Network network;
    private List<HosUNOSWorkRequest> HUWRList;
    
    
    public AssigningAuthorityWorkArea(JPanel userProcessContainer, UserAccount account, AAOrganization organization, UNOSEnterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.organization=organization;
        this.enterprise=enterprise;
        this.userAccount=account;
        this.network=network;
        HUWRList=new ArrayList<HosUNOSWorkRequest>();
        populatePatientTable();
        populateDonorTable();
        valueLabel.setText(enterprise.getName());
        
    }
    public void populateDonorTable(){
        DefaultTableModel model = (DefaultTableModel)organTable.getModel();
        model.setRowCount(0);
        for(WorkRequest request : enterprise.getCampUNOSworkQueue().getWorkRequestList()){
          CampUNOSWorkRequest Crequest=(CampUNOSWorkRequest)request;
          for(Organ organ : Crequest.getDonor().getOrganList().getOrganList()){
          Object[] row=new Object[3];
          row[0]=Crequest.getDonor().getId();
          row[1]=organ.getOrganName();
          row[2]=organ.getOrganID();
          model.addRow(row);
          }
        }
    }
        
    
    public void populatePatientTable(){
        HUWRList.clear();
      for(WorkRequest WR : enterprise.getHosUNOSworkQueue().getWorkRequestList()){
          HUWRList.add((HosUNOSWorkRequest)WR);
      }
        Collections.sort(HUWRList, new Comparator<HosUNOSWorkRequest>(){
          @Override
          public int compare(HosUNOSWorkRequest WR1, HosUNOSWorkRequest WR2){
              if(WR1.getPatient().getSeverity()-WR2.getPatient().getSeverity()==0){
                  return WR2.getPatient().getAdmittedDate().compareTo(WR1.getPatient().getAdmittedDate());
              }
              else{ 
                  return WR1.getPatient().getSeverity()-WR2.getPatient().getSeverity();
              }
          }
      });
        
        DefaultTableModel model = (DefaultTableModel)WorkRequestTable.getModel();
        model.setRowCount(0);
        for(HosUNOSWorkRequest hrequest : HUWRList){
            if(!hrequest.isAssigned()){
            Object[] row=new Object[4];
            row[0]=hrequest.getPatient().getPatientID();
            row[1]=hrequest.getPatient().getOrganType();
            row[2]=hrequest.getPatient().getSeverity();
            row[3]=hrequest.getPatient().getAdmittedDate();
            model.addRow(row);
            }
        }
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        WorkRequestTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        organTable = new javax.swing.JTable();
        AssignButton = new javax.swing.JButton();
        valueLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        AssignmentTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        WorkRequestTable.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        WorkRequestTable.setForeground(new java.awt.Color(51, 102, 255));
        WorkRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PatientID", "OrganNeeded", "Severity", "Date Admitted"
            }
        ));
        jScrollPane1.setViewportView(WorkRequestTable);

        organTable.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        organTable.setForeground(new java.awt.Color(51, 102, 255));
        organTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Donor ID", "Organ Donated", "OrganID"
            }
        ));
        jScrollPane2.setViewportView(organTable);

        AssignButton.setBackground(new java.awt.Color(51, 102, 255));
        AssignButton.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        AssignButton.setText("Assign");
        AssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignButtonActionPerformed(evt);
            }
        });

        valueLabel.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        valueLabel.setForeground(new java.awt.Color(51, 102, 255));

        jLabel2.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 102, 255));
        jLabel2.setText("Enterprise>> ");

        jLabel3.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 102, 255));
        jLabel3.setText("*********************************Unified Network For Organ Sharing***********************************");

        AssignmentTable.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        AssignmentTable.setForeground(new java.awt.Color(51, 102, 255));
        AssignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PatientID", "OrganNeeded", "Available", "OrganID", "OrganDonatedBy"
            }
        ));
        jScrollPane3.setViewportView(AssignmentTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(435, 435, 435)
                .addComponent(AssignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(AssignButton)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignButtonActionPerformed
//      List<HosUNOSWorkRequest> HUWRList=new ArrayList<HosUNOSWorkRequest>();
//      for(WorkRequest WR : enterprise.getHosUNOSworkQueue().getWorkRequestList()){
//          HUWRList.add((HosUNOSWorkRequest)WR);
//    
    try{
      DefaultTableModel model = (DefaultTableModel)AssignmentTable.getModel();
      model.setRowCount(0);
      List<CampUNOSWorkRequest> CUWRList=new ArrayList<CampUNOSWorkRequest>();
      CUWRList.clear();
      for(WorkRequest WR : enterprise.getCampUNOSworkQueue().getWorkRequestList()){
          CUWRList.add((CampUNOSWorkRequest)WR);
      }
      
      for(Iterator<HosUNOSWorkRequest> j = HUWRList.iterator(); j.hasNext(); ){
          HosUNOSWorkRequest HWR=j.next();
          if(!HWR.isAssigned()){
          int found=0;
          if(CUWRList.isEmpty()){
              break;
          }
          else{
              for(Iterator<CampUNOSWorkRequest> k = CUWRList.iterator(); k.hasNext(); ){
                  CampUNOSWorkRequest CWR=k.next();
                  if(CWR.getDonor().getOrganList().getOrganList().isEmpty()){
                      //CUWRList.remove(CWR);
                      k.remove();
                      continue;
                  }
                  else{
                      for(Iterator<Organ> i=CWR.getDonor().getOrganList().getOrganList().iterator();i.hasNext();){
                          Organ orgn=i.next();
                      //for(Organ orgn : CWR.getDonor().getOrganList().getOrganList()){
                          if(HWR.getPatient().getOrganType().getValue().equals(orgn.getOrganName())){
                              found=1;
                              Assignment assignment=network.getAssignmentDirectory().createAssignment(HWR.getPatient(), CWR.getDonor(), orgn);
                              System.out.println(CWR.getDonor().getFirstName());
                              System.out.println(orgn.getOrganID());
                              populateAssignmentTable(HWR.getPatient(),CWR.getDonor(),"YES",orgn);
                              //CWR.getDonor().getOrganList().getOrganList().remove(orgn);
                              i.remove();
                              //CWR.getDonor().getOrganList().getOrganList().remove(orgn);
                              HWR.setAssigned(true);
                              int I=enterprise.getHosUNOSworkQueue().getWorkRequestList().indexOf(HWR);
                              HosUNOSWorkRequest r=(HosUNOSWorkRequest)enterprise.getHosUNOSworkQueue().getWorkRequestList().get(I);
                              r.setAssigned(true);
                              //enterprise.getHosUNOSworkQueue().getWorkRequestList().remove(HWR);
                              populatePatientTable();
                              populateDonorTable();
                              
                          }
                      }
                  }
              }
          }
          if(found==0){
              populateAssignmentTable(HWR.getPatient(),null,"No",null);
              System.out.println("No organ of type "+HWR.getPatient().getOrganType().getValue()+" found");
          }
      }
      }
    }catch (Exception e){
        
        
    }
              
    }//GEN-LAST:event_AssignButtonActionPerformed
    public void populateAssignmentTable(PatientAccount patient,DonorAccount donor,String str,Organ orgn){
      DefaultTableModel model = (DefaultTableModel)AssignmentTable.getModel();
      //model.setRowCount(0);
      Object[] row=new Object[5];
      row[0]=patient.getPatientID();
      row[1]=patient.getOrganType();
      row[2]=str;
      row[3]=(null==orgn)?"":orgn.getOrganID();
      row[4]=(null==orgn)?"":donor.getId();
      model.addRow(row);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignButton;
    private javax.swing.JTable AssignmentTable;
    private javax.swing.JTable WorkRequestTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable organTable;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
